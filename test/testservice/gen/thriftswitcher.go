// Code generated by turbo. DO NOT EDIT.
package gen

import (
	"errors"
	"github.com/vaporz/turbo"
	"github.com/vaporz/turbo/test/testservice/gen/thrift/gen-go/services"
	"github.com/vaporz/turbo/test/testservice/gen/thrift/gen-go/shared"
	"net/http"
	"reflect"
)

// ThriftSwitcher is a runtime func with which a server starts.
var ThriftSwitcher = func(s turbo.Servable, serviceName, methodName string, resp http.ResponseWriter, req *http.Request) (serviceResponse interface{}, err error) { 
	if serviceName == "MinionsService" {
		switch methodName { 
		case "Eat":
			params, err := turbo.BuildThriftRequest(s, services.MinionsServiceEatArgs{}, req, buildStructArg)
			if err != nil {
				return nil, err
			}
			return s.Service("MinionsService").(*services.MinionsServiceClient).Eat(
				
				params[0].Interface().(string), )
		default:
			return nil, errors.New("No such method[" + methodName + "]")
		}
	}
	
	if serviceName == "TestService" {
		switch methodName { 
		case "SayHello":
			params, err := turbo.BuildThriftRequest(s, services.TestServiceSayHelloArgs{}, req, buildStructArg)
			if err != nil {
				return nil, err
			}
			return s.Service("TestService").(*services.TestServiceClient).SayHello(
				
				params[0].Interface().(*shared.CommonValues),
				params[1].Interface().(string),
				params[2].Interface().(int64),
				params[3].Interface().(bool),
				params[4].Interface().(float64),
				params[5].Interface().(int64),
				params[6].Interface().(int32),
				params[7].Interface().(int16),
				params[8].Interface().([]string),
				params[9].Interface().([]int32),
				params[10].Interface().([]bool),
				params[11].Interface().([]float64), )
		case "TestJson":
			params, err := turbo.BuildThriftRequest(s, services.TestServiceTestJsonArgs{}, req, buildStructArg)
			if err != nil {
				return nil, err
			}
			return s.Service("TestService").(*services.TestServiceClient).TestJson(
				
				params[0].Interface().(*services.TestJsonRequest), )
		default:
			return nil, errors.New("No such method[" + methodName + "]")
		}
	}
	
	if serviceResponse == nil && err == nil {
		return nil, errors.New("No such service[" + serviceName + "]")
	}
	return
}

func buildStructArg(s turbo.Servable, typeName string, req *http.Request) (v reflect.Value, err error) {
	switch typeName {

	case "CommonValues":
		request := &shared.CommonValues{  }
		turbo.BuildStruct(s, reflect.TypeOf(request).Elem(), reflect.ValueOf(request).Elem(), req)
		return reflect.ValueOf(request), nil

	case "TestJsonRequest":
		request := &services.TestJsonRequest{  }
		turbo.BuildStruct(s, reflect.TypeOf(request).Elem(), reflect.ValueOf(request).Elem(), req)
		return reflect.ValueOf(request), nil

	default:
		return v, errors.New("unknown typeName[" + typeName + "]")
	}
}
